=begin
#KORONA.entry API v1

#Our api provides access to our entry services

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module KoronaEntryClient
  # Represents a validity/definition of a ticket. each ticket can have more than one validity.
  class TicketEntry
    # Objects ID.
    attr_accessor :id

    # Date of creation.
    attr_accessor :create_date

    # *True*, if the ticket is used up.
    attr_accessor :used_up

    # Date of first use.
    attr_accessor :first_use

    # Date of last use (not exiting).
    attr_accessor :last_use

    # Date of last exiting.
    attr_accessor :last_exit

    # Number of entries already made.
    attr_accessor :uses

    # Optional maximum number of possible entries.
    attr_accessor :uses_max

    # When the ticket becomes valid.
    attr_accessor :valid_from

    # Optional fixed date until which the ticket is valid.
    attr_accessor :valid_to

    # Time from which the ticket becomes valid within a day. Format: HH:ii:ss
    attr_accessor :valid_from_time

    # Time until which the ticket becomes valid within a day. Format: HH:ii:ss
    attr_accessor :valid_to_time

    # Specifies the number of days after which the ticket is locked from the first use.
    attr_accessor :lock_after_use

    # Number of access points to which this validity applies.
    attr_accessor :entry_gates

    attr_accessor :information

    # Date until which the ticketEntry is locked.
    attr_accessor :locked_to

    # Specifies how many seconds the ticket should be locked after a successful entry.
    attr_accessor :re_entry_lock

    # Specifies a time period after which the ticket is locked from the first use. The standard ISO 8601 format is used - PyYmMwWdDThHmMsS. Note that weeks should not be shown if any other field is present and vice versa.
    attr_accessor :lock_for_period_after_use

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'create_date' => :'createDate',
        :'used_up' => :'usedUp',
        :'first_use' => :'firstUse',
        :'last_use' => :'lastUse',
        :'last_exit' => :'lastExit',
        :'uses' => :'uses',
        :'uses_max' => :'usesMax',
        :'valid_from' => :'validFrom',
        :'valid_to' => :'validTo',
        :'valid_from_time' => :'validFromTime',
        :'valid_to_time' => :'validToTime',
        :'lock_after_use' => :'lockAfterUse',
        :'entry_gates' => :'entryGates',
        :'information' => :'information',
        :'locked_to' => :'lockedTo',
        :'re_entry_lock' => :'reEntryLock',
        :'lock_for_period_after_use' => :'lockForPeriodAfterUse'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'create_date' => :'DateTime',
        :'used_up' => :'Boolean',
        :'first_use' => :'DateTime',
        :'last_use' => :'DateTime',
        :'last_exit' => :'DateTime',
        :'uses' => :'Integer',
        :'uses_max' => :'Integer',
        :'valid_from' => :'DateTime',
        :'valid_to' => :'DateTime',
        :'valid_from_time' => :'String',
        :'valid_to_time' => :'String',
        :'lock_after_use' => :'Integer',
        :'entry_gates' => :'Array<String>',
        :'information' => :'TicketInformation',
        :'locked_to' => :'DateTime',
        :'re_entry_lock' => :'Integer',
        :'lock_for_period_after_use' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaEntryClient::TicketEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaEntryClient::TicketEntry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.key?(:'used_up')
        self.used_up = attributes[:'used_up']
      end

      if attributes.key?(:'first_use')
        self.first_use = attributes[:'first_use']
      end

      if attributes.key?(:'last_use')
        self.last_use = attributes[:'last_use']
      end

      if attributes.key?(:'last_exit')
        self.last_exit = attributes[:'last_exit']
      end

      if attributes.key?(:'uses')
        self.uses = attributes[:'uses']
      end

      if attributes.key?(:'uses_max')
        self.uses_max = attributes[:'uses_max']
      end

      if attributes.key?(:'valid_from')
        self.valid_from = attributes[:'valid_from']
      end

      if attributes.key?(:'valid_to')
        self.valid_to = attributes[:'valid_to']
      end

      if attributes.key?(:'valid_from_time')
        self.valid_from_time = attributes[:'valid_from_time']
      end

      if attributes.key?(:'valid_to_time')
        self.valid_to_time = attributes[:'valid_to_time']
      end

      if attributes.key?(:'lock_after_use')
        self.lock_after_use = attributes[:'lock_after_use']
      end

      if attributes.key?(:'entry_gates')
        if (value = attributes[:'entry_gates']).is_a?(Array)
          self.entry_gates = value
        end
      end

      if attributes.key?(:'information')
        self.information = attributes[:'information']
      end

      if attributes.key?(:'locked_to')
        self.locked_to = attributes[:'locked_to']
      end

      if attributes.key?(:'re_entry_lock')
        self.re_entry_lock = attributes[:'re_entry_lock']
      end

      if attributes.key?(:'lock_for_period_after_use')
        self.lock_for_period_after_use = attributes[:'lock_for_period_after_use']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/)
      if !@valid_from_time.nil? && @valid_from_time !~ pattern
        invalid_properties.push("invalid value for \"valid_from_time\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/)
      if !@valid_to_time.nil? && @valid_to_time !~ pattern
        invalid_properties.push("invalid value for \"valid_to_time\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@valid_from_time.nil? && @valid_from_time !~ Regexp.new(/^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/)
      return false if !@valid_to_time.nil? && @valid_to_time !~ Regexp.new(/^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] valid_from_time Value to be assigned
    def valid_from_time=(valid_from_time)
      pattern = Regexp.new(/^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/)
      if !valid_from_time.nil? && valid_from_time !~ pattern
        fail ArgumentError, "invalid value for \"valid_from_time\", must conform to the pattern #{pattern}."
      end

      @valid_from_time = valid_from_time
    end

    # Custom attribute writer method with validation
    # @param [Object] valid_to_time Value to be assigned
    def valid_to_time=(valid_to_time)
      pattern = Regexp.new(/^([0-1]\d|2[0-3])\:[0-5]\d\:[0-5]\d$/)
      if !valid_to_time.nil? && valid_to_time !~ pattern
        fail ArgumentError, "invalid value for \"valid_to_time\", must conform to the pattern #{pattern}."
      end

      @valid_to_time = valid_to_time
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          create_date == o.create_date &&
          used_up == o.used_up &&
          first_use == o.first_use &&
          last_use == o.last_use &&
          last_exit == o.last_exit &&
          uses == o.uses &&
          uses_max == o.uses_max &&
          valid_from == o.valid_from &&
          valid_to == o.valid_to &&
          valid_from_time == o.valid_from_time &&
          valid_to_time == o.valid_to_time &&
          lock_after_use == o.lock_after_use &&
          entry_gates == o.entry_gates &&
          information == o.information &&
          locked_to == o.locked_to &&
          re_entry_lock == o.re_entry_lock &&
          lock_for_period_after_use == o.lock_for_period_after_use
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, create_date, used_up, first_use, last_use, last_exit, uses, uses_max, valid_from, valid_to, valid_from_time, valid_to_time, lock_after_use, entry_gates, information, locked_to, re_entry_lock, lock_for_period_after_use].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KoronaEntryClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
